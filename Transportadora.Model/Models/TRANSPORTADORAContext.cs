// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Transportadora.Model.Models
{
    public partial class TRANSPORTADORAContext : DbContext
    {
        public TRANSPORTADORAContext()
        {
        }

        public TRANSPORTADORAContext(DbContextOptions<TRANSPORTADORAContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Devolucao> Devolucao { get; set; }
        public virtual DbSet<DistanciaUnidade> DistanciaUnidade { get; set; }
        public virtual DbSet<Endereco> Endereco { get; set; }
        public virtual DbSet<Entrada> Entrada { get; set; }
        public virtual DbSet<EntradaItens> EntradaItens { get; set; }
        public virtual DbSet<Entregadores> Entregadores { get; set; }
        public virtual DbSet<Grupo> Grupo { get; set; }
        public virtual DbSet<GrupoUsuario> GrupoUsuario { get; set; }
        public virtual DbSet<Movimentacao> Movimentacao { get; set; }
        public virtual DbSet<Ocorrencia> Ocorrencia { get; set; }
        public virtual DbSet<Pickup> Pickup { get; set; }
        public virtual DbSet<Regiao> Regiao { get; set; }
        public virtual DbSet<ResultadoOcorrencia> ResultadoOcorrencia { get; set; }
        public virtual DbSet<Rota> Rota { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<TipoCliente> TipoCliente { get; set; }
        public virtual DbSet<TipoLogradouro> TipoLogradouro { get; set; }
        public virtual DbSet<TipoOcorrencia> TipoOcorrencia { get; set; }
        public virtual DbSet<Transporte> Transporte { get; set; }
        public virtual DbSet<Unidades> Unidades { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Veiculo> Veiculo { get; set; }
        public virtual DbSet<VwDevolucaoAnual> VwDevolucaoAnual { get; set; }
        public virtual DbSet<VwDevolucaoMes> VwDevolucaoMes { get; set; }
        public virtual DbSet<VwEntradasAnual> VwEntradasAnual { get; set; }
        public virtual DbSet<VwEntradasMes> VwEntradasMes { get; set; }
        public virtual DbSet<VwUtilizacaoAnual> VwUtilizacaoAnual { get; set; }
        public virtual DbSet<VwUtilizacaoMes> VwUtilizacaoMes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsbuilder)
=> optionsbuilder.UseSqlServer("data source=localhost\\SQLEXPRESS;Initial Catalog=TRANSPORTADORA;Integrated Security=True; TrustServerCertificate=True");

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("Latin1_General_CI_AS");

            modelBuilder.Entity<Cliente>(entity =>
            {
                entity.HasKey(e => e.Clcodigo);

                entity.ToTable("CLIENTE");

                entity.Property(e => e.Clcodigo).HasColumnName("CLCodigo");

                entity.Property(e => e.Clcnpj)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLCNPJ");

                entity.Property(e => e.ClcodTipoCliente).HasColumnName("CLCodTipoCliente");

                entity.Property(e => e.Clcpf)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLCPF");

                entity.Property(e => e.CldataCadastro)
                    .HasColumnType("datetime")
                    .HasColumnName("CLDataCadastro");

                entity.Property(e => e.CldataNascimento)
                    .HasColumnType("datetime")
                    .HasColumnName("CLDataNascimento");

                entity.Property(e => e.Clemail)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CLEmail");

                entity.Property(e => e.Clnome)
                    .IsUnicode(false)
                    .HasColumnName("CLNome");

                entity.Property(e => e.Clrg)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLRg");

                entity.Property(e => e.Clsexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLSexo")
                    .IsFixedLength();

                entity.Property(e => e.Cltelefone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLTelefone");

                entity.HasOne(d => d.ClcodTipoClienteNavigation)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.ClcodTipoCliente)
                    .HasConstraintName("FK_CLIENTE_TIPO_CLIENTE");
            });

            modelBuilder.Entity<Devolucao>(entity =>
            {
                entity.HasKey(e => e.Decodigo);

                entity.ToTable("DEVOLUCAO");

                entity.Property(e => e.Decodigo).HasColumnName("DECodigo");

                entity.Property(e => e.Cevalor)
                    .HasColumnType("money")
                    .HasColumnName("CEValor");

                entity.Property(e => e.DecodClienteEntrega).HasColumnName("DECodClienteEntrega");

                entity.Property(e => e.DecodStatus).HasColumnName("DECodStatus");

                entity.Property(e => e.DecodTransporte).HasColumnName("DECodTransporte");

                entity.Property(e => e.DecodUnidadeDestino).HasColumnName("DECodUnidadeDestino");

                entity.Property(e => e.DecodUnidadeOrigem).HasColumnName("DECodUnidadeOrigem");

                entity.Property(e => e.Depeso)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DEPeso");

                entity.HasOne(d => d.DecodStatusNavigation)
                    .WithMany(p => p.Devolucao)
                    .HasForeignKey(d => d.DecodStatus)
                    .HasConstraintName("FK_DEVOLUCAO_STATUS");

                entity.HasOne(d => d.DecodTransporteNavigation)
                    .WithMany(p => p.Devolucao)
                    .HasForeignKey(d => d.DecodTransporte)
                    .HasConstraintName("FK_DEVOLUCAO_TRANSPORTE");

                entity.HasOne(d => d.DecodUnidadeDestinoNavigation)
                    .WithMany(p => p.DevolucaoDecodUnidadeDestinoNavigation)
                    .HasForeignKey(d => d.DecodUnidadeDestino)
                    .HasConstraintName("FK_DEVOLUCAO_UNIDADES");

                entity.HasOne(d => d.DecodUnidadeOrigemNavigation)
                    .WithMany(p => p.DevolucaoDecodUnidadeOrigemNavigation)
                    .HasForeignKey(d => d.DecodUnidadeOrigem)
                    .HasConstraintName("FK_DEVOLUCAO_UNIDADES1");
            });

            modelBuilder.Entity<DistanciaUnidade>(entity =>
            {
                entity.HasKey(e => e.Ducodigo);

                entity.ToTable("DISTANCIA_UNIDADE");

                entity.Property(e => e.Ducodigo).HasColumnName("DUCodigo");

                entity.Property(e => e.DucodUnidadeDestino).HasColumnName("DUCodUnidadeDestino");

                entity.Property(e => e.DucodUnidadeOrigem).HasColumnName("DUCodUnidadeOrigem");

                entity.Property(e => e.Dudistancia)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("DUDistancia");

                entity.HasOne(d => d.DucodUnidadeDestinoNavigation)
                    .WithMany(p => p.DistanciaUnidadeDucodUnidadeDestinoNavigation)
                    .HasForeignKey(d => d.DucodUnidadeDestino)
                    .HasConstraintName("FK_DISTANCIA_UNIDADE_UNIDADES1");

                entity.HasOne(d => d.DucodUnidadeOrigemNavigation)
                    .WithMany(p => p.DistanciaUnidadeDucodUnidadeOrigemNavigation)
                    .HasForeignKey(d => d.DucodUnidadeOrigem)
                    .HasConstraintName("FK_DISTANCIA_UNIDADE_UNIDADES");
            });

            modelBuilder.Entity<Endereco>(entity =>
            {
                entity.HasKey(e => e.Encodigo);

                entity.ToTable("ENDERECO");

                entity.Property(e => e.Encodigo).HasColumnName("ENCodigo");

                entity.Property(e => e.EnLongitude).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Enbairro)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENBairro");

                entity.Property(e => e.Encep)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENCEP");

                entity.Property(e => e.Encidade)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENCidade");

                entity.Property(e => e.EncodCliente).HasColumnName("ENCodCliente");

                entity.Property(e => e.EncodRegiao).HasColumnName("ENCodRegiao");

                entity.Property(e => e.EncodTipoLogradouro).HasColumnName("ENCodTipoLogradouro");

                entity.Property(e => e.EncodUnidade).HasColumnName("ENCodUnidade");

                entity.Property(e => e.Encomplemento)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENComplemento");

                entity.Property(e => e.Enestado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENEstado");

                entity.Property(e => e.Enlatitude)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("ENLatitude");

                entity.Property(e => e.Enlogradouro)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ENLogradouro");

                entity.Property(e => e.Ennumero)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ENNumero");

                entity.HasOne(d => d.EncodClienteNavigation)
                    .WithMany(p => p.Endereco)
                    .HasForeignKey(d => d.EncodCliente)
                    .HasConstraintName("FK_ENDERECO_CLIENTE");

                entity.HasOne(d => d.EncodRegiaoNavigation)
                    .WithMany(p => p.Endereco)
                    .HasForeignKey(d => d.EncodRegiao)
                    .HasConstraintName("FK_ENDERECO_REGIAO");

                entity.HasOne(d => d.EncodTipoLogradouroNavigation)
                    .WithMany(p => p.Endereco)
                    .HasForeignKey(d => d.EncodTipoLogradouro)
                    .HasConstraintName("FK_ENDERECO_TIPO_LOGRADOURO");

                entity.HasOne(d => d.EncodUnidadeNavigation)
                    .WithMany(p => p.Endereco)
                    .HasForeignKey(d => d.EncodUnidade)
                    .HasConstraintName("FK_ENDERECO_UNIDADES");
            });

            modelBuilder.Entity<Entrada>(entity =>
            {
                entity.HasKey(e => e.Ercodigo);

                entity.ToTable("ENTRADA");

                entity.Property(e => e.Ercodigo).HasColumnName("ERCodigo");

                entity.Property(e => e.Eragendado).HasColumnName("ERAgendado");

                entity.Property(e => e.ErcodCliente).HasColumnName("ERCodCliente");

                entity.Property(e => e.ErcodPickup).HasColumnName("ERCodPickup");

                entity.Property(e => e.ErcodUnidade).HasColumnName("ERCodUnidade");

                entity.Property(e => e.ErcodUnidadeDestino).HasColumnName("ERCodUnidadeDestino");

                entity.Property(e => e.Erdata)
                    .HasColumnType("datetime")
                    .HasColumnName("ERData")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ErdataAgendado)
                    .HasColumnType("datetime")
                    .HasColumnName("ERDataAgendado");

                entity.Property(e => e.Erfragil)
                    .HasColumnName("ERFragil")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ernumero)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ERNumero");

                entity.Property(e => e.ErnumeroNotaFiscal).HasColumnName("ERNumeroNotaFiscal");

                entity.Property(e => e.Erremetente).HasColumnName("ERRemetente");

                entity.Property(e => e.Erseguro).HasColumnName("ERSeguro");

                entity.Property(e => e.ErtransporteIniciado)
                    .HasColumnName("ERTransporteIniciado")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Erurgente)
                    .HasColumnName("ERUrgente")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ervalor)
                    .HasColumnType("money")
                    .HasColumnName("ERValor");

                entity.Property(e => e.ErvalorTotal)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("ERValorTotal");

                entity.HasOne(d => d.ErcodClienteNavigation)
                    .WithMany(p => p.Entrada)
                    .HasForeignKey(d => d.ErcodCliente)
                    .HasConstraintName("FK_ENTRADA_CLIENTE");

                entity.HasOne(d => d.ErcodPickupNavigation)
                    .WithMany(p => p.Entrada)
                    .HasForeignKey(d => d.ErcodPickup)
                    .HasConstraintName("FK_ENTRADA_PICKUP");

                entity.HasOne(d => d.ErcodUnidadeNavigation)
                    .WithMany(p => p.EntradaErcodUnidadeNavigation)
                    .HasForeignKey(d => d.ErcodUnidade)
                    .HasConstraintName("FK_ENTRADA_UNIDADES");

                entity.HasOne(d => d.ErcodUnidadeDestinoNavigation)
                    .WithMany(p => p.EntradaErcodUnidadeDestinoNavigation)
                    .HasForeignKey(d => d.ErcodUnidadeDestino)
                    .HasConstraintName("FK_ENTRADA_UNIDADES1");
            });

            modelBuilder.Entity<EntradaItens>(entity =>
            {
                entity.HasKey(e => e.Eicodigo);

                entity.ToTable("ENTRADA_ITENS");

                entity.Property(e => e.Eicodigo).HasColumnName("EICodigo");

                entity.Property(e => e.Eialtura)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EIAltura");

                entity.Property(e => e.EicodEntrada).HasColumnName("EICodEntrada");

                entity.Property(e => e.Eicomprimento)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EIComprimento");

                entity.Property(e => e.Eidescricao)
                    .IsUnicode(false)
                    .HasColumnName("EIDescricao");

                entity.Property(e => e.Eilargura)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EILargura");

                entity.Property(e => e.Eipeso)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("EIPeso");

                entity.Property(e => e.Eivalor)
                    .HasColumnType("decimal(18, 2)")
                    .HasColumnName("EIValor");

                entity.HasOne(d => d.EicodEntradaNavigation)
                    .WithMany(p => p.EntradaItens)
                    .HasForeignKey(d => d.EicodEntrada)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ENTRADA_ITENS_ENTRADA");
            });

            modelBuilder.Entity<Entregadores>(entity =>
            {
                entity.HasKey(e => e.Etcodigo);

                entity.ToTable("ENTREGADORES");

                entity.Property(e => e.Etcodigo).HasColumnName("ETCodigo");

                entity.Property(e => e.EtcodUnidade).HasColumnName("ETCodUnidade");

                entity.Property(e => e.Etnome)
                    .IsUnicode(false)
                    .HasColumnName("ETNome");

                entity.Property(e => e.Ettelefone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ETTelefone");

                entity.HasOne(d => d.EtcodUnidadeNavigation)
                    .WithMany(p => p.Entregadores)
                    .HasForeignKey(d => d.EtcodUnidade)
                    .HasConstraintName("FK_ENTREGADORES_UNIDADES");
            });

            modelBuilder.Entity<Grupo>(entity =>
            {
                entity.HasKey(e => e.Gpcodigo);

                entity.ToTable("GRUPO");

                entity.Property(e => e.Gpcodigo).HasColumnName("GPCodigo");

                entity.Property(e => e.Gpdescricao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GPDescricao");
            });

            modelBuilder.Entity<GrupoUsuario>(entity =>
            {
                entity.HasKey(e => e.Gucodigo);

                entity.ToTable("GRUPO_USUARIO");

                entity.Property(e => e.Gucodigo).HasColumnName("GUCodigo");

                entity.Property(e => e.GucodGrupo).HasColumnName("GUCodGrupo");

                entity.Property(e => e.GucodUsuario).HasColumnName("GUCodUsuario");

                entity.HasOne(d => d.GucodGrupoNavigation)
                    .WithMany(p => p.GrupoUsuario)
                    .HasForeignKey(d => d.GucodGrupo)
                    .HasConstraintName("FK_GRUPO_USUARIO_GRUPO");

                entity.HasOne(d => d.GucodUsuarioNavigation)
                    .WithMany(p => p.GrupoUsuario)
                    .HasForeignKey(d => d.GucodUsuario)
                    .HasConstraintName("FK_GRUPO_USUARIO_USUARIO");
            });

            modelBuilder.Entity<Movimentacao>(entity =>
            {
                entity.HasKey(e => e.Mocodigo);

                entity.ToTable("MOVIMENTACAO");

                entity.Property(e => e.Mocodigo).HasColumnName("MOCodigo");

                entity.Property(e => e.MoDataEntrega).HasColumnType("datetime");

                entity.Property(e => e.MoDataHora).HasColumnType("datetime");

                entity.Property(e => e.MoObservacoes).IsUnicode(false);

                entity.Property(e => e.MoclienteNaoEncontrado).HasColumnName("MOClienteNaoEncontrado");

                entity.Property(e => e.MocoEntregador).HasColumnName("MOcoEntregador");

                entity.Property(e => e.MocodEntregador).HasColumnName("MOCodEntregador");

                entity.Property(e => e.MocodTransporte).HasColumnName("MOCodTransporte");

                entity.Property(e => e.MocodUnidade).HasColumnName("MOCodUnidade");

                entity.Property(e => e.MocodUsuario).HasColumnName("MOCodUsuario");

                entity.Property(e => e.Modevolucao).HasColumnName("MODevolucao");

                entity.Property(e => e.MoforaRota)
                    .HasColumnName("MOForaRota")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Momotivo)
                    .IsUnicode(false)
                    .HasColumnName("MOMotivo");

                entity.Property(e => e.MotipoMovimentacao)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MOTipoMovimentacao")
                    .IsFixedLength();

                entity.HasOne(d => d.MocoEntregadorNavigation)
                    .WithMany(p => p.MovimentacaoMocoEntregadorNavigation)
                    .HasForeignKey(d => d.MocoEntregador)
                    .HasConstraintName("FK_MOVIMENTACAO_ENTREGADORES1");

                entity.HasOne(d => d.MocodEntregadorNavigation)
                    .WithMany(p => p.MovimentacaoMocodEntregadorNavigation)
                    .HasForeignKey(d => d.MocodEntregador)
                    .HasConstraintName("FK_MOVIMENTACAO_ENTREGADORES");

                entity.HasOne(d => d.MocodTransporteNavigation)
                    .WithMany(p => p.Movimentacao)
                    .HasForeignKey(d => d.MocodTransporte)
                    .HasConstraintName("FK_MOVIMENTACAO_TRANSPORTE");

                entity.HasOne(d => d.MocodUnidadeNavigation)
                    .WithMany(p => p.Movimentacao)
                    .HasForeignKey(d => d.MocodUnidade)
                    .HasConstraintName("FK_MOVIMENTACAO_UNIDADES");
            });

            modelBuilder.Entity<Ocorrencia>(entity =>
            {
                entity.HasKey(e => e.Occodigo);

                entity.ToTable("OCORRENCIA");

                entity.Property(e => e.Occodigo).HasColumnName("OCCodigo");

                entity.Property(e => e.OccodEntrada).HasColumnName("OCCodEntrada");

                entity.Property(e => e.OccodResultadoOcorrencia).HasColumnName("OCCodResultadoOcorrencia");

                entity.Property(e => e.OccodTipoOcorrencia).HasColumnName("OCCodTipoOcorrencia");

                entity.Property(e => e.Ocdata)
                    .HasColumnType("datetime")
                    .HasColumnName("OCData");

                entity.Property(e => e.Ocdescricao)
                    .IsUnicode(false)
                    .HasColumnName("OCDescricao");

                entity.HasOne(d => d.OccodEntradaNavigation)
                    .WithMany(p => p.Ocorrencia)
                    .HasForeignKey(d => d.OccodEntrada)
                    .HasConstraintName("FK_OCORRENCIA_ENTRADA");

                entity.HasOne(d => d.OccodResultadoOcorrenciaNavigation)
                    .WithMany(p => p.Ocorrencia)
                    .HasForeignKey(d => d.OccodResultadoOcorrencia)
                    .HasConstraintName("FK_OCORRENCIA_RESULTADO_OCORRENCIA");

                entity.HasOne(d => d.OccodTipoOcorrenciaNavigation)
                    .WithMany(p => p.Ocorrencia)
                    .HasForeignKey(d => d.OccodTipoOcorrencia)
                    .HasConstraintName("FK_OCORRENCIA_TIPO_OCORRENCIA");
            });

            modelBuilder.Entity<Pickup>(entity =>
            {
                entity.HasKey(e => e.Pccodigo);

                entity.ToTable("PICKUP");

                entity.Property(e => e.Pccodigo).HasColumnName("PCCodigo");

                entity.Property(e => e.PccodCliente).HasColumnName("PCCodCliente");

                entity.Property(e => e.PccodEntregador).HasColumnName("PCCodEntregador");

                entity.Property(e => e.PccodUnidade).HasColumnName("PCCodUnidade");

                entity.Property(e => e.Pcdata)
                    .HasColumnType("datetime")
                    .HasColumnName("PCData");

                entity.Property(e => e.Pcdistancia).HasColumnName("PCDistancia");

                entity.Property(e => e.Pcnumero)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PCNumero");

                entity.Property(e => e.Pcobservacao)
                    .IsUnicode(false)
                    .HasColumnName("PCObservacao");

                entity.HasOne(d => d.PccodEntregadorNavigation)
                    .WithMany(p => p.Pickup)
                    .HasForeignKey(d => d.PccodEntregador)
                    .HasConstraintName("FK_PICKUP_ENTREGADORES");

                entity.HasOne(d => d.PccodUnidadeNavigation)
                    .WithMany(p => p.Pickup)
                    .HasForeignKey(d => d.PccodUnidade)
                    .HasConstraintName("FK_PICKUP_UNIDADES");
            });

            modelBuilder.Entity<Regiao>(entity =>
            {
                entity.HasKey(e => e.Recodigo);

                entity.ToTable("REGIAO");

                entity.Property(e => e.Recodigo).HasColumnName("RECodigo");

                entity.Property(e => e.Redescricao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REDescricao");
            });

            modelBuilder.Entity<ResultadoOcorrencia>(entity =>
            {
                entity.HasKey(e => e.Rccodigo);

                entity.ToTable("RESULTADO_OCORRENCIA");

                entity.Property(e => e.Rccodigo).HasColumnName("RCCodigo");

                entity.Property(e => e.Rcdescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("RCDescricao");
            });

            modelBuilder.Entity<Rota>(entity =>
            {
                entity.HasKey(e => e.Rocodigo);

                entity.ToTable("ROTA");

                entity.Property(e => e.Rocodigo).HasColumnName("ROCodigo");

                entity.Property(e => e.RocodEntrada).HasColumnName("ROCodEntrada");

                entity.Property(e => e.RocodUnidade).HasColumnName("ROCodUnidade");

                entity.Property(e => e.RocodUnidadeOrigem).HasColumnName("ROCodUnidadeOrigem");

                entity.Property(e => e.RoultimaEtapa).HasColumnName("ROUltimaEtapa");

                entity.HasOne(d => d.RocodEntradaNavigation)
                    .WithMany(p => p.Rota)
                    .HasForeignKey(d => d.RocodEntrada)
                    .HasConstraintName("FK_ROTA_ENTRADA");

                entity.HasOne(d => d.RocodUnidadeNavigation)
                    .WithMany(p => p.RotaRocodUnidadeNavigation)
                    .HasForeignKey(d => d.RocodUnidade)
                    .HasConstraintName("FK_ROTA_UNIDADES");

                entity.HasOne(d => d.RocodUnidadeOrigemNavigation)
                    .WithMany(p => p.RotaRocodUnidadeOrigemNavigation)
                    .HasForeignKey(d => d.RocodUnidadeOrigem)
                    .HasConstraintName("FK_ROTA_UNIDADES1");
            });

            modelBuilder.Entity<Status>(entity =>
            {
                entity.HasKey(e => e.Stcodigo);

                entity.ToTable("STATUS");

                entity.Property(e => e.Stcodigo).HasColumnName("STCodigo");

                entity.Property(e => e.Stdescricao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STDescricao");
            });

            modelBuilder.Entity<TipoCliente>(entity =>
            {
                entity.HasKey(e => e.Tccodigo);

                entity.ToTable("TIPO_CLIENTE");

                entity.Property(e => e.Tccodigo).HasColumnName("TCCodigo");

                entity.Property(e => e.Tcdescricao)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TCDescricao");
            });

            modelBuilder.Entity<TipoLogradouro>(entity =>
            {
                entity.HasKey(e => e.Tlcodigo);

                entity.ToTable("TIPO_LOGRADOURO");

                entity.Property(e => e.Tlcodigo)
                    .ValueGeneratedNever()
                    .HasColumnName("TLCodigo");

                entity.Property(e => e.Tldescricao)
                    .IsUnicode(false)
                    .HasColumnName("TLDescricao");
            });

            modelBuilder.Entity<TipoOcorrencia>(entity =>
            {
                entity.HasKey(e => e.Tccodigo);

                entity.ToTable("TIPO_OCORRENCIA");

                entity.Property(e => e.Tccodigo).HasColumnName("TCCodigo");

                entity.Property(e => e.Tcdescricao)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TCDescricao");
            });

            modelBuilder.Entity<Transporte>(entity =>
            {
                entity.HasKey(e => e.Cecodigo)
                    .HasName("PK_CLIENTE_ENTREGA");

                entity.ToTable("TRANSPORTE");

                entity.Property(e => e.Cecodigo).HasColumnName("CECodigo");

                entity.Property(e => e.CecodEntrada).HasColumnName("CECodEntrada");

                entity.Property(e => e.CecodStatus).HasColumnName("CECodStatus");

                entity.Property(e => e.CecodigoRastreio)
                    .IsUnicode(false)
                    .HasColumnName("CECodigoRastreio");

                entity.Property(e => e.Cedata)
                    .HasColumnType("datetime")
                    .HasColumnName("CEData");

                entity.Property(e => e.CehoraCriacao)
                    .HasColumnType("datetime")
                    .HasColumnName("CEHoraCriacao");

                entity.HasOne(d => d.CecodStatusNavigation)
                    .WithMany(p => p.Transporte)
                    .HasForeignKey(d => d.CecodStatus)
                    .HasConstraintName("FK_CLIENTE_ENTREGA_STATUS");
            });

            modelBuilder.Entity<Unidades>(entity =>
            {
                entity.HasKey(e => e.Uncodigo);

                entity.ToTable("UNIDADES");

                entity.Property(e => e.Uncodigo).HasColumnName("UNCodigo");

                entity.Property(e => e.Uncidade)
                    .IsUnicode(false)
                    .HasColumnName("UNCidade");

                entity.Property(e => e.Undescricao)
                    .IsUnicode(false)
                    .HasColumnName("UNDescricao");

                entity.Property(e => e.Unestado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UNEstado");

                entity.Property(e => e.Unhub).HasColumnName("UNHub");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.Uscodigo);

                entity.ToTable("USUARIO");

                entity.Property(e => e.Uscodigo).HasColumnName("USCodigo");

                entity.Property(e => e.UscodUnidade).HasColumnName("USCodUnidade");

                entity.Property(e => e.Usdesativado)
                    .HasColumnName("USDesativado")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Usnome)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("USNome");

                entity.Property(e => e.Ussenha)
                    .IsUnicode(false)
                    .HasColumnName("USSenha");

                entity.HasOne(d => d.UscodUnidadeNavigation)
                    .WithMany(p => p.Usuario)
                    .HasForeignKey(d => d.UscodUnidade)
                    .HasConstraintName("FK_USUARIO_UNIDADES");
            });

            modelBuilder.Entity<Veiculo>(entity =>
            {
                entity.HasKey(e => e.Vecodigo);

                entity.ToTable("VEICULO");

                entity.Property(e => e.Vecodigo).HasColumnName("VECodigo");

                entity.Property(e => e.Veano).HasColumnName("VEAno");

                entity.Property(e => e.VecodUnidade).HasColumnName("VECodUnidade");

                entity.Property(e => e.VecorPredominante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VECorPredominante");

                entity.Property(e => e.Vedescricao)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VEDescricao");

                entity.Property(e => e.Veplaca)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("VEPlaca");

                entity.Property(e => e.Vetipo)
                    .IsUnicode(false)
                    .HasColumnName("VETipo");

                entity.HasOne(d => d.VecodUnidadeNavigation)
                    .WithMany(p => p.Veiculo)
                    .HasForeignKey(d => d.VecodUnidade)
                    .HasConstraintName("FK_VEICULO_UNIDADES");
            });

            modelBuilder.Entity<VwDevolucaoAnual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_DEVOLUCAO_ANUAL");
            });

            modelBuilder.Entity<VwDevolucaoMes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_DEVOLUCAO_MES");
            });

            modelBuilder.Entity<VwEntradasAnual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ENTRADAS_ANUAL");
            });

            modelBuilder.Entity<VwEntradasMes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_ENTRADAS_MES");
            });

            modelBuilder.Entity<VwUtilizacaoAnual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_UTILIZACAO_ANUAL");

                entity.Property(e => e.ClNome)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwUtilizacaoMes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_UTILIZACAO_MES");

                entity.Property(e => e.ClNome)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}